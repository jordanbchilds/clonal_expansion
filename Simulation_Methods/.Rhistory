par(op)
dev.off()
plotter = function(x, ylim, t, title, main){
plot(1, type="n", ylim=ylim, xlim=c(0,80), ylab=title, xlab="Time (years)")
lines(ts(x[,3], start=0,end=80, frequency=365), lwd=2, col="black")
lines(ts(x[,2], start=0,end=80, frequency=365), lwd=1, col="black")
lines(ts(x[,4], start=0,end=80, frequency=365), lwd=1, col="black")
lines(ts(x[,1], start=0,end=80, frequency=365), lwd=1, lty=2, col="black")
lines(ts(x[,5], start=0,end=80, frequency=365), lwd=1, lty=2, col="black")
title(main=main, outer=T, line=-1)
}
pdf("./Simulations/PDF/julia_v_R.pdf", width=14,height=8.5)
op = par(mfrow=c(1,2))
plotter(CN_qnt_jl, ylim=c(0,max(CN_qnt_jl)), t, title="Copy Number", main="Gillespie Julia")
plotter(ML_qnt_jl, ylim=c(0,1), t, title="Mutation Load", main="Gillespie Julia")
plotter(CN_qnt_r, ylim=c(0,max(CN_qnt_r)), t, title="Copy Number", main="Gillespie R")
plotter(ML_qnt_r, ylim=c(0,1), t, title="Mutation Load", main="Gillespie R")
plotter(CN_ts_tau_r, ylim=c(0,max(CN_ts_taur)), t, title="Copy Number", main="Tau Leap R")
plotter(ML_ts_tau_r, ylim=c(0,1), t, title="Mutation Load", main="Tau Leap R")
par(op)
dev.off()
plotter = function(x, ylim, t, title, main){
plot(1, type="n", ylim=ylim, xlim=c(0,80), ylab=title, xlab="Time (years)")
lines(ts(x[,3], start=0,end=80, frequency=365), lwd=2, col="black")
lines(ts(x[,2], start=0,end=80, frequency=365), lwd=1, col="black")
lines(ts(x[,4], start=0,end=80, frequency=365), lwd=1, col="black")
lines(ts(x[,1], start=0,end=80, frequency=365), lwd=1, lty=3, col="black")
lines(ts(x[,5], start=0,end=80, frequency=365), lwd=1, lty=3, col="black")
title(main=main, outer=T, line=-1)
}
pdf("./Simulations/PDF/julia_v_R.pdf", width=14,height=8.5)
op = par(mfrow=c(1,2))
plotter(CN_qnt_jl, ylim=c(0,max(CN_qnt_jl)), t, title="Copy Number", main="Gillespie Julia")
plotter(ML_qnt_jl, ylim=c(0,1), t, title="Mutation Load", main="Gillespie Julia")
plotter(CN_qnt_r, ylim=c(0,max(CN_qnt_r)), t, title="Copy Number", main="Gillespie R")
plotter(ML_qnt_r, ylim=c(0,1), t, title="Mutation Load", main="Gillespie R")
plotter(CN_ts_tau_r, ylim=c(0,max(CN_ts_taur)), t, title="Copy Number", main="Tau Leap R")
plotter(ML_ts_tau_r, ylim=c(0,1), t, title="Mutation Load", main="Tau Leap R")
par(op)
dev.off()
plotter = function(x, ylim, t, title, main){
plot(1, type="n", ylim=ylim, xlim=c(0,80), ylab=title, xlab="Time (years)")
lines(ts(x[,3], start=0,end=80, frequency=365), lwd=2, col="black")
lines(ts(x[,2], start=0,end=80, frequency=365), lwd=1, col="black")
lines(ts(x[,4], start=0,end=80, frequency=365), lwd=1, col="black")
lines(ts(x[,1], start=0,end=80, frequency=365), lwd=1, lty=3, col="darkgrey")
lines(ts(x[,5], start=0,end=80, frequency=365), lwd=1, lty=3, col="darkgrey")
title(main=main, outer=T, line=-1)
}
pdf("./Simulations/PDF/julia_v_R.pdf", width=14,height=8.5)
op = par(mfrow=c(1,2))
plotter(CN_qnt_jl, ylim=c(0,max(CN_qnt_jl)), t, title="Copy Number", main="Gillespie Julia")
plotter(ML_qnt_jl, ylim=c(0,1), t, title="Mutation Load", main="Gillespie Julia")
plotter(CN_qnt_r, ylim=c(0,max(CN_qnt_r)), t, title="Copy Number", main="Gillespie R")
plotter(ML_qnt_r, ylim=c(0,1), t, title="Mutation Load", main="Gillespie R")
plotter(CN_ts_tau_r, ylim=c(0,max(CN_ts_taur)), t, title="Copy Number", main="Tau Leap R")
plotter(ML_ts_tau_r, ylim=c(0,1), t, title="Mutation Load", main="Tau Leap R")
par(op)
dev.off()
plotter = function(x, ylim, t, title, main){
plot(1, type="n", ylim=ylim, xlim=c(0,80), ylab=title, xlab="Time (years)")
lines(ts(x[,3], start=0,end=80, frequency=365), lwd=2, col="black")
lines(ts(x[,2], start=0,end=80, frequency=365), lwd=1, col="black")
lines(ts(x[,4], start=0,end=80, frequency=365), lwd=1, col="black")
lines(ts(x[,1], start=0,end=80, frequency=365), lwd=1, col="darkgrey")
lines(ts(x[,5], start=0,end=80, frequency=365), lwd=1, col="darkgrey")
title(main=main, outer=T, line=-1)
}
pdf("./Simulations/PDF/julia_v_R.pdf", width=14,height=8.5)
op = par(mfrow=c(1,2))
plotter(CN_qnt_jl, ylim=c(0,max(CN_qnt_jl)), t, title="Copy Number", main="Gillespie Julia")
plotter(ML_qnt_jl, ylim=c(0,1), t, title="Mutation Load", main="Gillespie Julia")
plotter(CN_qnt_r, ylim=c(0,max(CN_qnt_r)), t, title="Copy Number", main="Gillespie R")
plotter(ML_qnt_r, ylim=c(0,1), t, title="Mutation Load", main="Gillespie R")
plotter(CN_ts_tau_r, ylim=c(0,max(CN_ts_taur)), t, title="Copy Number", main="Tau Leap R")
plotter(ML_ts_tau_r, ylim=c(0,1), t, title="Mutation Load", main="Tau Leap R")
par(op)
dev.off()
dist_comp(list(CN_ts_jl, CN_ts_r, CN_ts_taur, CN_ts_tau_r), time_titles,
legend=c("R", "Julia"))
time_titles = paste(1:8*10, " Years")
dist_comp = function(sim_list, titles, legend){
n = length(sim_list) # no. of simulations being compared
p = length(titles) # no. of time slices per simulation
# eqiuv. p = ncol(sim_list[[i]]) for i=1:p
for(i in 1:p){ # cycle thorugh time slices
xrange = matrix(NA, nrow=n, ncol=2) # matrix to store min and max values in x axis
yrange = double(n) # vector to store max y vals (min always zero)
for(j in 1:n){ # cycle through simulations
xrange[j,] = as.numeric(range(sim_list[[j]][,i])) # range of simulation j and time slice i
yrange[j] = max(density(sim_list[[j]][,i])$y) # max density for simulation j and time slice i
}
xlim = range(xrange)
ylim = c(0,max(yrange))
print(ylim)
plot(1, type='n', xlim=xlim, ylim=ylim, xlab="", ylab="Density",
main=titles[i] )
for(j in 1:n){
lines(density(sim_list[[j]][,i]), col=j, lty=1)
}
legend("topright", legend=legend, col=1:n, lty=1)
}
}
dist_comp(list(CN_ts_jl, CN_ts_r, CN_ts_taur, CN_ts_tau_r), time_titles,
legend=c("R", "Julia"))
dist_comp(list(CN_ts_jl, CN_ts_r, CN_ts_tau_r), time_titles,
legend=c("Gill Julia", "Gill R", "tau R"))
N_ts_jl
CN_ts_jl
dist_comp(list(CN_ts_jl, CN_ts_r, CN_ts_tau_r), time_titles,
legend=c("Gill Julia", "Gill R", "Tau R"))
dist_comp(list(ML_ts_jl, ML_ts_r, ML_ts_tau_r), time_titles,
legend=c("Gill Julia", "Gill R", "Tau R"))
ML_qnt_jl
CN_qnt_jl
CN_qnt_r
CN_ts_jl
plot(density(CN_ts_jl[,1]))
plot(density(CN_ts_r[,1]))
plot(density(CN_ts_tau_r[,1]))
slice_dist(tauLeap_sim, 1:8*10*365*24*3600, Tmax, dt)
library("parallel")
##########
## POSSION LEAP PRCOESS
##########
dir.create("Simulations", showWarnings=F)
Tmax = 80*365*24*3600
dt = 24*3600
N.sim = 1000 # no. of simulations
# define simulation parameters
N = list(Pre=matrix(c(1,0,0,1,1,0,0,1,1,0), byrow=TRUE, ncol=2, nrow=5),
Post=matrix(c(2,0,0,2,0,0,0,0,1,1), byrow=TRUE, ncol=2, nrow=5) )
# define simulation parameters
N$h = function(x, th=c(3.06e-8, 3.06e-8, 3.06e-8, 3.06e-8, 0)){
th*rep(x,length.out=5)
}
tauleap_simulation = function(N, Tmax, dt){
n = Tmax%/%dt
S = t(N$Post - N$Pre)
u = nrow(S)
v = as.integer( ncol(S) )
xmat = matrix(ncol=u, nrow=n)
xmat[1,] = N$M
i = 1L
while( i<n ){
h = N$h(xmat[i,])
if( sum(h)<1e-10 ){
xmat[(i+1):n,] = c(0,0)
return(xmat)
}
r = rpois(v,h*dt)
xmat[i+1, ] = xmat[i,] + S%*%r
i = i+1L
}
xmat
}
gen_N = function(N, N.sim){
NN = list()
for(i in 1:N.sim){
N.temp = N
# const initial populations
N.temp$M = c(100, 100)
# N.temp$M = inits()
NN[[i]] = N.temp
}
return(NN)
}
NN = gen_N(N, N.sim)
###
### Nsim simulations
tauLeap_time = system.time({
cl  = makeCluster(4)
clusterExport(cl, c("tauleap_simulation", "NN"))
tauLeap_raw = parLapply(cl, NN, tauleap_simulation, Tmax, dt)
stopCluster(cl)
})
tauLeap_raw
###
### convert to copy number and mutation load
raw_to_hC = function(sim){
n = nrow(sim)
copy_num = rowSums(sim)
mut_load = sim[,2]/copy_num
mut_load[is.na(mut_load)] = 0.0
return(cbind(copy_num, mut_load))
}
tauLeap_sim = lapply(tauLeap_raw, raw_to_hC)
tauLeap_sim
plot(1, type='n', xlim=c(0,80), ylim=c(0,700), xlab="", ylab="")
##########
## POSSION LEAP PRCOESS
##########
myBlack = rgb(0,0,0, alpha=15, max=255)
for( sim in tauLeap_sim){
lines(ts(sim[,1], start=0, end=80, frequency=52), col=myBlack)
}
title(main="Copy Number")
plot(1, type='n', xlim=c(0,80), ylim=c(0,1), xlab="", ylab="")
for( sim in tauLeap_sim){
lines(ts(sim[,2], start=0, end=80, frequency=52), col=myBlack)
}
title(main="Mutation Load")
###
### distribution at given times
slice_dist = function(sims, t, Tmax, dt){
t_tot = seq(dt, Tmax, by=dt)
sim_t = list()
sim_t[[1]] = matrix(NA, nrow=length(sims), ncol=length(t))
sim_t[[2]] =  sim_t[[1]]
for(i in 1:length(sims)){
for(j in 1:length(t)){
sim_t[[1]][i,j] = sims[[i]][t_tot==t[j],1]
sim_t[[2]][i,j] = sims[[i]][t_tot==t[j],2]
}
}
return(sim_t)
}
sims_dist = slice_dist(tauLeap_sim, 1:8*10*365*24*3600, Tmax, dt)
sims_dist
plot(density(sim_dist[[1]][,1]))
plot(density(sims_dist[[1]][,1]))
plot(density(sims_dist[[1]][,2]))
plot(density(sims_dist[[1]][,3]))
plot(1, type="n", xlim=c(0,600), ylim=c(0,0.005), ylim="", xlim="")
plot(1, type="n", xlim=c(0,600), ylim=c(0,0.005), ylab="", xlab="")
for(i in 1:8){
lines(density(sims_dist[[i]][,i]))
}
plot(1, type="n", xlim=c(0,600), ylim=c(0,0.01), ylab="", xlab="")
for(i in 1:8){
lines(density(sims_dist[[i]][,i]))
}
plot(density(sims_dist[[1]][,3]))
plot(1, type="n", xlim=c(0,600), ylim=c(0,0.01), ylab="", xlab="")
for(i in 1:8){
lines(density(sims_dist[[i]][,i]))
}
lines(density(sims_dist[[i]][,i]), col=i)
for(i in 1:8){
lines(density(sims_dist[[i]][,i]), col=i)
}
for(i in 1:8){
lines(density(sims_dist[[2]][,i]), col=i)
}
plot(1, type="n", xlim=c(0,600), ylim=c(0,0.01), ylab="", xlab="")
for(i in 1:8){
lines(density(sims_dist[[2]][,i]), col=i)
}
plot(1, type="n", xlim=c(0,600), ylim=c(0,0.01), ylab="", xlab="")
for(i in 1:8){
lines(density(sims_dist[[1]][,i]), col=i)
}
plot(1, type="n", xlim=c(0,600), ylim=c(0,0.01), ylab="", xlab="")
for(i in 1:8){
lines(density(sims_dist[[1]][,i]), col=i)
}
time_titles = paste(1:8*10, " Years")
pdf("./Simulations/PDF/CN_ts_comparison.pdf", width=14, height=7)
op = par(mfrow=c(2,5))
dist_comp(list(CN_ts_jl, CN_ts_r, CN_ts_tau_r), time_titles,
legend=c("Gill Julia", "Gill R", "Tau R"))
title(main="Copy Number", outer=T, line=-1)
par(op)
dev.off()
dist_comp = function(sim_list, titles, legend){
n = length(sim_list) # no. of simulations being compared
p = length(titles) # no. of time slices per simulation
# eqiuv. p = ncol(sim_list[[i]]) for i=1:p
for(i in 1:p){ # cycle thorugh time slices
xrange = matrix(NA, nrow=n, ncol=2) # matrix to store min and max values in x axis
yrange = double(n) # vector to store max y vals (min always zero)
for(j in 1:n){ # cycle through simulations
xrange[j,] = as.numeric(range(sim_list[[j]][,i])) # range of simulation j and time slice i
yrange[j] = max(density(sim_list[[j]][,i])$y) # max density for simulation j and time slice i
}
xlim = range(xrange)
ylim = c(0,max(yrange))
print(ylim)
plot(1, type='n', xlim=xlim, ylim=ylim, xlab="", ylab="Density",
main=titles[i] )
for(j in 1:n){
lines(density(sim_list[[j]][,i]), col=j, lty=1)
}
legend("topright", legend=legend, col=1:n, lty=1)
}
}
CN_qnt_jl = read.delim("./Simulations/CN_qnt_jl.txt")
ML_qnt_jl = read.delim("./Simulations/ML_qnt_jl.txt")
CN_qnt_r = read.table("./Simulations/CN_qnt_r.txt")
ML_qnt_r = read.table("./Simulations/ML_qnt_r.txt")
CN_ts_jl = read.table("./Simulations/CN_qnt_jl.txt")
ML_ts_jl = read.table("./Simulations/ML_qnt_jl.txt")
CN_ts_r = read.table("./Simulations/CN_ts_r.txt")
ML_ts_r = read.table("./Simulations/ML_ts_r.txt")
CN_ts_tau_r = read.table("./Simulations/CN_qnt_tau_r.txt")
ML_ts_tau_r = read.table("./Simulations/ML_qnt_tau_r.txt")
CN_ts_tau_r = read.table("./Simulations/CN_ts_tau_r.txt")
ML_ts_tau_r = read.table("./Simulations/ML_ts_tau_r.txt")
Tmax = 80*365*24*3600
dt = 24*3600
t = seq(0,Tmax, by=dt)
plotter = function(x, ylim, t, title, main){
plot(1, type="n", ylim=ylim, xlim=c(0,80), ylab=title, xlab="Time (years)")
lines(ts(x[,3], start=0,end=80, frequency=365), lwd=2, col="black")
lines(ts(x[,2], start=0,end=80, frequency=365), lwd=1, col="black")
lines(ts(x[,4], start=0,end=80, frequency=365), lwd=1, col="black")
lines(ts(x[,1], start=0,end=80, frequency=365), lwd=1, col="darkgrey")
lines(ts(x[,5], start=0,end=80, frequency=365), lwd=1, col="darkgrey")
title(main=main, outer=T, line=-1)
}
dist_comp = function(sim_list, titles, legend){
n = length(sim_list) # no. of simulations being compared
p = length(titles) # no. of time slices per simulation
# eqiuv. p = ncol(sim_list[[i]]) for i=1:p
for(i in 1:p){ # cycle thorugh time slices
xrange = matrix(NA, nrow=n, ncol=2) # matrix to store min and max values in x axis
yrange = double(n) # vector to store max y vals (min always zero)
for(j in 1:n){ # cycle through simulations
xrange[j,] = as.numeric(range(sim_list[[j]][,i])) # range of simulation j and time slice i
yrange[j] = max(density(sim_list[[j]][,i])$y) # max density for simulation j and time slice i
}
xlim = range(xrange)
ylim = c(0,max(yrange))
print(ylim)
plot(1, type='n', xlim=xlim, ylim=ylim, xlab="", ylab="Density",
main=titles[i] )
for(j in 1:n){
lines(density(sim_list[[j]][,i]), col=j, lty=1)
}
legend("topright", legend=legend, col=1:n, lty=1)
}
}
time_titles = paste(1:8*10, " Years")
pdf("./Simulations/PDF/CN_ts_comparison.pdf", width=14, height=7)
op = par(mfrow=c(2,5))
dist_comp(list(CN_ts_jl, CN_ts_r, CN_ts_tau_r), time_titles,
legend=c("Gill Julia", "Gill R", "Tau R"))
title(main="Copy Number", outer=T, line=-1)
par(op)
dev.off()
dist_comp = function(sim_list, titles, legend){
n = length(sim_list) # no. of simulations being compared
p = length(titles) # no. of time slices per simulation
# eqiuv. p = ncol(sim_list[[i]]) for i=1:p
for(i in 1:p){ # cycle thorugh time slices
xrange = matrix(NA, nrow=n, ncol=2) # matrix to store min and max values in x axis
yrange = double(n) # vector to store max y vals (min always zero)
for(j in 1:n){ # cycle through simulations
xrange[j,] = as.numeric(range(sim_list[[j]][,i])) # range of simulation j and time slice i
yrange[j] = max(density(sim_list[[j]][,i])$y) # max density for simulation j and time slice i
}
xlim = range(xrange)
ylim = c(0,max(yrange))
print(ylim)
plot(1, type='n', xlim=xlim, ylim=ylim, xlab="", ylab="Density",
main=titles[i] )
for(k in 1:n){
lines(density(sim_list[[k]][,i]), col=k, lty=1)
}
legend("topright", legend=legend, col=1:n, lty=1)
}
}
dist_comp(list(CN_ts_jl, CN_ts_r, CN_ts_tau_r), time_titles,
legend=c("Gill Julia", "Gill R", "Tau R"))
CN_ts_jl
CN_ts_r
CN_ts_tau_r
CN_ts_jl = read.table("./Simulations/CN_ts_jl.txt")
ML_ts_jl = read.table("./Simulations/ML_ts_jl.txt")
dist_comp(list(CN_ts_jl, CN_ts_r, CN_ts_tau_r), time_titles,
legend=c("Gill Julia", "Gill R", "Tau R"))
dist_comp(list(ML_ts_jl, ML_ts_r, ML_ts_tau_r), time_titles,
legend=c("Gill Julia", "Gill R", "Tau R"))
CN_qnt_jl = read.delim("./Simulations/CN_qnt_jl.txt")
ML_qnt_jl = read.delim("./Simulations/ML_qnt_jl.txt")
CN_qnt_r = read.table("./Simulations/CN_qnt_r.txt")
ML_qnt_r = read.table("./Simulations/ML_qnt_r.txt")
CN_ts_jl = read.table("./Simulations/CN_ts_jl.txt")
ML_ts_jl = read.table("./Simulations/ML_ts_jl.txt")
CN_ts_r = read.table("./Simulations/CN_ts_r.txt")
ML_ts_r = read.table("./Simulations/ML_ts_r.txt")
CN_ts_tau_r = read.table("./Simulations/CN_qnt_tau_r.txt")
ML_ts_tau_r = read.table("./Simulations/ML_qnt_tau_r.txt")
CN_ts_tau_r = read.table("./Simulations/CN_ts_tau_r.txt")
ML_ts_tau_r = read.table("./Simulations/ML_ts_tau_r.txt")
Tmax = 80*365*24*3600
dt = 24*3600
t = seq(0,Tmax, by=dt)
plotter = function(x, ylim, t, title, main){
plot(1, type="n", ylim=ylim, xlim=c(0,80), ylab=title, xlab="Time (years)")
lines(ts(x[,3], start=0,end=80, frequency=365), lwd=2, col="black")
lines(ts(x[,2], start=0,end=80, frequency=365), lwd=1, col="black")
lines(ts(x[,4], start=0,end=80, frequency=365), lwd=1, col="black")
lines(ts(x[,1], start=0,end=80, frequency=365), lwd=1, col="darkgrey")
lines(ts(x[,5], start=0,end=80, frequency=365), lwd=1, col="darkgrey")
title(main=main, outer=T, line=-1)
}
dist_comp = function(sim_list, titles, legend){
n = length(sim_list) # no. of simulations being compared
p = length(titles) # no. of time slices per simulation
# eqiuv. p = ncol(sim_list[[i]]) for i=1:p
for(i in 1:p){ # cycle thorugh time slices
xrange = matrix(NA, nrow=n, ncol=2) # matrix to store min and max values in x axis
yrange = double(n) # vector to store max y vals (min always zero)
for(j in 1:n){ # cycle through simulations
xrange[j,] = as.numeric(range(sim_list[[j]][,i])) # range of simulation j and time slice i
yrange[j] = max(density(sim_list[[j]][,i])$y) # max density for simulation j and time slice i
}
xlim = range(xrange)
ylim = c(0,max(yrange))
plot(1, type='n', xlim=xlim, ylim=ylim, xlab="", ylab="Density",
main=titles[i] )
for(k in 1:n){
lines(density(sim_list[[k]][,i]), col=k, lty=1)
}
legend("topright", legend=legend, col=1:n, lty=1)
}
}
pdf("./Simulations/PDF/sim_comparison.pdf", width=14,height=8.5)
op = par(mfrow=c(1,2))
plotter(CN_qnt_jl, ylim=c(0,max(CN_qnt_jl)), t, title="Copy Number", main="Gillespie Julia")
plotter(ML_qnt_jl, ylim=c(0,1), t, title="Mutation Load", main="Gillespie Julia")
plotter(CN_qnt_r, ylim=c(0,max(CN_qnt_r)), t, title="Copy Number", main="Gillespie R")
plotter(ML_qnt_r, ylim=c(0,1), t, title="Mutation Load", main="Gillespie R")
plotter(CN_ts_tau_r, ylim=c(0,max(CN_ts_taur)), t, title="Copy Number", main="Tau Leap R")
plotter(ML_ts_tau_r, ylim=c(0,1), t, title="Mutation Load", main="Tau Leap R")
par(op)
dev.off()
time_titles = paste(1:8*10, " Years")
pdf("./Simulations/PDF/CN_ts_comparison.pdf", width=14, height=7)
op = par(mfrow=c(2,5))
dist_comp(list(CN_ts_jl, CN_ts_r, CN_ts_tau_r), time_titles,
legend=c("Gill Julia", "Gill R", "Tau R"))
title(main="Copy Number", outer=T, line=-1)
par(op)
dev.off()
pdf("./Simulations/PDF/ML_ts_comparison.pdf", width=14, height=7)
op = par(mfrow=c(2,5))
dist_comp(list(ML_ts_jl, ML_ts_r, ML_ts_tau_r), time_titles,
legend=c("Gill Julia", "Gill R", "Tau R"))
title(main="Mutation Load", outer=T, line=-1)
par(op)
dev.off()
pdf("./Simulations/PDF/sim_comparison.pdf", width=14,height=8.5)
op = par(mfrow=c(1,2))
plotter(CN_qnt_jl, ylim=c(0,max(CN_qnt_jl)), t, title="Copy Number", main="Gillespie Julia")
plotter(ML_qnt_jl, ylim=c(0,1), t, title="Mutation Load", main="Gillespie Julia")
plotter(CN_qnt_r, ylim=c(0,max(CN_qnt_r)), t, title="Copy Number", main="Gillespie R")
plotter(ML_qnt_r, ylim=c(0,1), t, title="Mutation Load", main="Gillespie R")
plotter(CN_ts_tau_r, ylim=c(0,max(CN_ts_tau_r)), t, title="Copy Number", main="Tau Leap R")
plotter(ML_ts_tau_r, ylim=c(0,1), t, title="Mutation Load", main="Tau Leap R")
par(op)
dev.off()
CN_ts_tau_r
plotter = function(x, ylim, t, title, main){
plot(1, type="n", ylim=ylim, xlim=c(0,80), main=title, xlab="Time (years)")
lines(ts(x[,3], start=0,end=80, frequency=52), lwd=2, col="black")
lines(ts(x[,2], start=0,end=80, frequency=52), lwd=1, col="black")
lines(ts(x[,4], start=0,end=80, frequency=52), lwd=1, col="black")
lines(ts(x[,1], start=0,end=80, frequency=52), lwd=1, col="darkgrey")
lines(ts(x[,5], start=0,end=80, frequency=52), lwd=1, col="darkgrey")
title(main=main, outer=T, line=-1)
}
pdf("./Simulations/PDF/sim_comparison.pdf", width=14,height=8.5)
op = par(mfrow=c(1,2))
plotter(CN_qnt_jl, ylim=c(0,max(CN_qnt_jl)), t, title="Copy Number", main="Gillespie Julia")
plotter(ML_qnt_jl, ylim=c(0,1), t, title="Mutation Load", main="Gillespie Julia")
plotter(CN_qnt_r, ylim=c(0,max(CN_qnt_r)), t, title="Copy Number", main="Gillespie R")
plotter(ML_qnt_r, ylim=c(0,1), t, title="Mutation Load", main="Gillespie R")
plotter(CN_ts_tau_r, ylim=c(0,max(CN_ts_tau_r)), t, title="Copy Number", main="Tau Leap R")
plotter(ML_ts_tau_r, ylim=c(0,1), t, title="Mutation Load", main="Tau Leap R")
par(op)
dev.off()
CN_ts_tau_r
pdf("./Simulations/PDF/sim_comparison.pdf", width=14,height=8.5)
CN_qnt_tau_r = read.table("./Simulations/CN_qnt_tau_r.txt")
ML_qnt_tau_r = read.table("./Simulations/ML_qnt_tau_r.txt")
pdf("./Simulations/PDF/sim_comparison.pdf", width=14,height=8.5)
op = par(mfrow=c(1,2))
plotter(CN_qnt_jl, ylim=c(0,max(CN_qnt_jl)), t, title="Copy Number", main="Gillespie Julia")
plotter(ML_qnt_jl, ylim=c(0,1), t, title="Mutation Load", main="Gillespie Julia")
plotter(CN_qnt_r, ylim=c(0,max(CN_qnt_r)), t, title="Copy Number", main="Gillespie R")
plotter(ML_qnt_r, ylim=c(0,1), t, title="Mutation Load", main="Gillespie R")
plotter(CN_qnt_tau_r, ylim=c(0,max(CN_ts_tau_r)), t, title="Copy Number", main="Tau Leap R")
plotter(ML_qnt_tau_r, ylim=c(0,1), t, title="Mutation Load", main="Tau Leap R")
par(op)
dev.off()
time_titles = paste(1:8*10, " Years")
pdf("./Simulations/PDF/CN_ts_comparison.pdf", width=14, height=7)
op = par(mfrow=c(2,4))
dist_comp(list(CN_ts_jl, CN_ts_r, CN_ts_tau_r), time_titles,
legend=c("Gill Julia", "Gill R", "Tau R"))
title(main="Copy Number", outer=T, line=-1)
par(op)
dev.off()
pdf("./Simulations/PDF/ML_ts_comparison.pdf", width=14, height=7)
op = par(mfrow=c(2,4))
dist_comp(list(ML_ts_jl, ML_ts_r, ML_ts_tau_r), time_titles,
legend=c("Gill Julia", "Gill R", "Tau R"))
title(main="Mutation Load", outer=T, line=-1)
par(op)
dev.off()
pdf("./Simulations/PDF/sim_comparison.pdf", width=14,height=8.5)
op = par(mfrow=c(1,2))
plotter(CN_qnt_jl, ylim=c(0,max(CN_qnt_jl)), t, title="Copy Number", main="Gillespie Julia")
plotter(ML_qnt_jl, ylim=c(0,1), t, title="Mutation Load", main="Gillespie Julia")
plotter(CN_qnt_r, ylim=c(0,max(CN_qnt_r)), t, title="Copy Number", main="Gillespie R")
plotter(ML_qnt_r, ylim=c(0,1), t, title="Mutation Load", main="Gillespie R")
plotter(CN_qnt_tau_r, ylim=c(0,max(CN_qnt_tau_r)), t, title="Copy Number", main="Tau Leap R")
plotter(ML_qnt_tau_r, ylim=c(0,1), t, title="Mutation Load", main="Tau Leap R")
par(op)
dev.off()
